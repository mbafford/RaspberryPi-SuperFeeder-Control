#!/usr/bin/env python

import time
import yaml
import os
import sys
import pytz
from datetime import datetime,timedelta
from pytz import timezone

import json
import threading
import BaseHTTPServer

DEBUG="--debug" in sys.argv

# how often the program should sleep between checking if a feeding is necessary
# having this be less than FEEDER_RESET_TIME_SECONDS doesn't make much sense as
# any feed attempts will need to be spaced out by that amount anyway
LOOP_SLEEP_TIME_SECONDS=5 if DEBUG else 60

STATUS_FILE = os.path.expanduser( "./feeder_status" )

# the GPIO pin the feeder relay is connected to
PIN_FEEDER=18

# time to complete one feeding - this can be longer than needed, since the super-feeder has
# an internal timer that has been adjusted for the desired amount of food
FEEDER_CYCLE_TIME_SECONDS=30 

# time needed to reset the super-feeder's internal cooldown/reset timer
# this timer keeps the super-feeder from feeding multiple times during a brown-out
# but also means our feeding attempts have to be delayed by at least this much - the
# manual suggests 1-2 minutes, so we're giving a little bit extra
FEEDER_RESET_TIME_SECONDS=150 # 2m 30s

# the feeding schedule timezone - this assumes the RaspberryPi will be running on GMT clock
# but we want to program the feeding schedule using local timezone
RUN_TIMEZONE='US/Eastern'

# feeding schedule, per-day - times are in 24 hour time (quoted so Python doesn't assume octal)
# 12 grams each time - targeting 100 grams per day (50 per cat)
feedingSchedule = [ '0600', '0610', '1200', '1210', '1500', '1510', '1900', '1910' ];

# maximum number of feedings to catch up on if there is a period of time where the feeder was unable
# to run - the first time the feeder is run this will be ignored, and only a feeding within the past 
# 10 minutes will be run - otherwise this many feedings between the last feed run and the current time
# will be run if there is a lapse in feedings
MAX_CATCHUP_FEEDINGS = 6

def makeStatusRequestHandler(statusObj):
    class StatusHTTPRequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):
        status = statusObj

        def do_GET(self):
            if self.path == "/status":
                now = getNow()

                data = {}
                data['now']      = str(now)
                data['status']   = status.getStatus()
                data['last']     = { 'run': str(status.getLastRun()), 'feeding': str(status.getLastFeeding()) }
                data['schedule'] = feedingSchedule
                data['next']     = str( findNearestScheduledFeeding( now ) )
                data['missed']   = [ str(f) for f in status.getMissedFeedings( now, False ) ]

                self.send_response(200)
                self.send_header("Content-type", "text/html")
                self.end_headers()
                self.wfile.write(json.dumps(data))
                self.wfile.write("\r\n")
            else:
                self.send_response(404)
                self.send_header("Content-type", "text/plain")
                self.end_headers()
                self.wfile.write("%s\r\n" % ( json.dumps({"error": "Only the endpoint /status is supported"}) ))

    return StatusHTTPRequestHandler

class RaspPi:
    def checkIsPi():
        isPi = os.uname()[4].startswith("arm")
        if isPi:
            import RPi.GPIO as gpio
            gpio.setwarnings(False)
            gpio.setmode(gpio.BCM)
            gpio.setup(PIN_FEEDER, gpio.OUT)
            gpio.output(PIN_FEEDER, gpio.HIGH)
        else:
            print("*** Not really running on a Raspberry Pi. Feedings will be simulated.")
        return isPi
    
    @staticmethod
    def setPIN(pin, value):
        if RaspPi.IS_PI:
            print("Setting GPIO pin [%d] to [%d]" % (pin,value)) 
            import RPi.GPIO as gpio
            gpio.setwarnings(False)
            gpio.output(PIN_FEEDER, gpio.LOW)
        else:
            print("Not really a RaspberryPi. Would be setting GPIO pin [%d] to [%d], but not" % (pin,value)) 
   
    IS_PI=checkIsPi()


class Status:
    filename = ""
    data     = {}

    def __init__(self,filename):
        self.filename = filename

    # when first starting or re-starting, read in the last
    # known status information
    def readStatusFile(self):
        try:
            if not os.path.exists( self.filename ):
                print("Status file [%s] does not yet exist. Returning empty status information." % ( self.filename ))
                self.data = {}
                return

            with open( STATUS_FILE, "r" ) as f:
                data = yaml.load( f )
                if not data:
                    print("Unable to load status file [%s]! Returning empty document." % (self.filename))
                    self.data = {}
                self.data = data
                return

        except Exception as ex:
            print("Unable to open status file [%s]! Exiting unhappily." % (self.filename))
            print(ex)
            sys.exit(1)

    def writeStatusFile( self ):
        try:
            # for such a small configuration file don't use aliases, which just make
            # the file harder to read with no major benefit (cost or size)
            noalias_dumper = yaml.dumper.SafeDumper
            noalias_dumper.ignore_aliases = lambda self, data: True
            with open( self.filename, "w" ) as f:
                f.write( yaml.dump( self.data, Dumper=noalias_dumper ) )
        except:
            print("Unable to write status file. Will continue running, but this isn't good.")
            return

    @staticmethod
    def getTZAwareTime( statusInfo, field ):
        time = statusInfo.get(field, None)
        if not time: return None

        if not time.tzinfo: # assume time stored without timezone information is in UTC
            time = time.replace(tzinfo=pytz.utc)
            
        return time.astimezone(timezone(RUN_TIMEZONE))

    def getStatus(self):
        return self.data.get('status', 'initializing')

    def setStatus(self, status):
        self.data['status'] = status

    def getLastFeeding(self):
        return Status.getTZAwareTime(self.data, 'lastFeeding') 

    def getLastRun(self):
        return Status.getTZAwareTime(self.data, 'lastRun') 

    # Updates the last feeding date/time to the provided value
    def setLastFeeding(self, ts):
        self.data['lastFeeding'] = ts

    # Updates the last run date/time to the provided value
    def setLastRun(self, ts):
        self.data['lastRun'] = ts

    def getMissedFeedings(self, now, printStatus=True):
        lastFeeding = self.getLastFeeding()

        if lastFeeding:
            # if we recorded a prior feeding, find all scheduled feedings between that time and now
            missedFeedings = findMissedFeedingsSinceLastRun( now, lastFeeding )
        else:
            # for the first run, catch up on recent scheduled feedings - if nothing was scheduled
            # in the defined time period, then nothing will be returned
            missedFeedings = findMissedFeedingsSinceLastRun( now, now - timedelta(minutes=300) )

            if missedFeedings:
                if printStatus: print("Very first run and a feeding was scheduled to happen recently. Running that feeding now.")
                missedFeedings = missedFeedings[0:1]
            else:
                if printStatus: print("Very first run and no recent scheduled feeding. Not feeding now. Future feedings will happen on normal schedule.")
                missedFeedings = []
        
        # if too many feedings are missed, cap the feeding limit at MAX_CATCHUP_FEEDINGS
        # and start feeding from the oldest feeding
        numMissed = len(missedFeedings)
        if len(missedFeedings) > MAX_CATCHUP_FEEDINGS:
            totalMissed = len(missedFeedings)

            skippedFeedings = missedFeedings[0:-1*MAX_CATCHUP_FEEDINGS]
            missedFeedings  = missedFeedings[-1*MAX_CATCHUP_FEEDINGS:]

            print("Missed %d feedings since %s. Skipping %d of them, and running %d (max catch-up feedings is set to %d)." \
                    % ( totalMissed, lastFeeding, len(skippedFeedings), len(missedFeedings), MAX_CATCHUP_FEEDINGS))

        return missedFeedings

    # allow for sleeping for X seconds, but also updating the status so any calling apps can
    # easily see how long is left on the sleep - sleeps in 1 second intervals instead of sleeping
    # for the full sleep time in a single go
    def sleep(self, status, seconds):
        for i in range(0, seconds):
            self.setStatus("%s (%d seconds)" % ( status, seconds-i ))
            time.sleep( 1 )

def daterange(start_date, end_date):
    for n in range(int ((end_date - start_date).days + 1)):
        yield start_date + timedelta(n)

def findMissedFeedingsSinceLastRun( now, lastFeed ):
    ret = []

    for date in daterange( lastFeed, now + timedelta(1) ):
        date = date.replace( microsecond=0, second=0, minute=0, hour=0 )

        for feed in feedingSchedule:
            hours = int(feed)/100
            mins  = int(feed) % (hours * 100)

            check = date.replace(hour=hours, minute=mins)
            
            if check > lastFeed and check < now:
                ret.append( check )
    return ret

def findNearestScheduledFeeding( now ):
    for date in daterange( now, now + timedelta(1) ):
        date = date.replace( microsecond=0, second=0, minute=0, hour=0 )

        for feed in feedingSchedule:
            hours = int(feed)/100
            mins  = int(feed) % (hours * 100)

            check = date.replace(hour=hours, minute=mins)
            
            if check > now: return check

    # this doesn't make any sense - since the feedings are done based
    # on wallclock time, the only way this would happen is if there is
    # no defined schedule  
    return None

def triggerFeeding():
    if RaspPi.IS_PI:
        import RPi.GPIO as gpio
        RaspPi.setPIN(PIN_FEEDER, gpio.LOW)
        print("    Sleeping for %d seconds while cycle completes" % ( FEEDER_CYCLE_TIME_SECONDS ) )
        status.sleep('feeding', FEEDER_CYCLE_TIME_SECONDS)
        RaspPi.setPIN(PIN_FEEDER, gpio.HIGH)
    else:
        print('    Not really a RaspberryPi. "Feeding" the cats.')
        status.sleep('feeding', FEEDER_CYCLE_TIME_SECONDS)

def getNow():
    u=datetime.utcnow()
    u=u.replace(tzinfo=pytz.utc)
    u=u.astimezone(timezone(RUN_TIMEZONE))
    return u


def runLoop(status):
    status.readStatusFile()

    firstRun = True
    feederNeedsReset  = False

    while True:
        try:
            justFed = False
            now = getNow()

            lastFeeding = status.getLastFeeding() 
            lastRun     = status.getLastRun()
       
            # no sense processing anything if we're still in the feeder sleep window (so the feeder resets)
            if lastRun and (now-lastRun).seconds < FEEDER_RESET_TIME_SECONDS:
                if missedFeedings: print("Sleeping %d seconds until feeder has reset" % (FEEDER_RESET_TIME_SECONDS - (now-lastRun).seconds))
                feederNeedsReset = True
                continue

            nextScheduledFeeding = findNearestScheduledFeeding( now )
            missedFeedings       = status.getMissedFeedings   ( now )
 
            if DEBUG or firstRun:
                firstRun = False
                print("Feeding schedule: %s" % ( " ".join( feedingSchedule ) ))
                print("Current Time: %s - Last Feeding: %s - Last Run: %s - Next Feeding: %s" % ( now, lastFeeding, lastRun, nextScheduledFeeding ) )
       
            # if we've never fed before, and never run before, and there are no "missed"
            # feedings, then mark the last run and last feed as now so future calculations will
            # be based off of this timestamp
            if not lastFeeding and not lastRun and not missedFeedings:
                status.setLastFeeding ( now )
                status.setLastRun     ( now )
                status.writeStatusFile( )
                justFed = True

            # otherwise, there's a feeding to process - make sure it's ok to run that now
            elif missedFeedings:
                print("Missed feedings to catch up on: ")
                for feeding in missedFeedings: print("    %s" % feeding) 
               
                feeding = missedFeedings[0]

                print("Running feeding scheduled for %s" % ( feeding ))

                status.setStatus('feeding')
                triggerFeeding()
                status.setLastFeeding ( feeding )
                status.setLastRun     ( now     )
                status.writeStatusFile( )
                justFed = True
        
        except Exception as ex:
            print(ex)

        finally:
            if DEBUG or justFed: print("Sleeping...")

            if feederNeedsReset:
                status.setStatus('sleeping (feeder resetting)')
            else:
                status.setStatus('sleeping')
            
            status.sleep('sleeping', LOOP_SLEEP_TIME_SECONDS)

if __name__ == '__main__':
    status = Status(STATUS_FILE)

    httpServer = BaseHTTPServer.HTTPServer(('', 8484), makeStatusRequestHandler(status) )
    thread = threading.Thread( target = httpServer.serve_forever )
    thread.daemon = True
    print("Starting HTTP server thread")
    thread.start()
    print("After starting HTTP server thread")

    runLoop( status )
